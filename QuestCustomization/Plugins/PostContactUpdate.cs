// <copyright file="PostContactUpdate.cs" company="">
// Copyright (c) 2016 All Rights Reserved
// </copyright>
// <author></author>
// <date>3/17/2016 4:20:52 PM</date>
// <summary>Implements the PostContactUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace QuestCustomization.Plugins
{
    using System;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;

    /// <summary>
    /// PostContactUpdate Plugin.
    /// Fires when the following attributes are updated:
    /// All Attributes
    /// </summary>    
    public class PostContactUpdate: Plugin
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostContactUpdate"/> class.
        /// </summary>
        public PostContactUpdate()
            : base(typeof(PostContactUpdate))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Update", "contact", new Action<LocalPluginContext>(ExecutePostContactUpdate)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePostContactUpdate(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }

            // TODO: Implement your custom Plug-in business logic.

             

            IPluginExecutionContext context = localContext.PluginExecutionContext;
            IOrganizationService service = localContext.OrganizationService;



            if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
            {

                if (context.PostEntityImages.Contains("sr3") && context.PostEntityImages["sr3"] is Entity)
                {
                    Entity entityImage = (Entity)context.PostEntityImages["sr3"];
                    Entity entityTarget= (Entity)context.InputParameters["Target"];
                    //Entity entityTarget = service.Retrieve(context.PrimaryEntityName, context.PrimaryEntityId, new ColumnSet(true)); 
                    try
                    {
                        if (entityTarget.LogicalName == "contact" && entityImage.Attributes.Contains("websiteurl"))
                        {
                            var url = (string)entityImage.Attributes["websiteurl"];
                            if (url.Contains("case.html?"))
                                    {
                                        var Start = url.IndexOf("case.html?", 0) + "case.html?".Length;
                                        var strSource = url.Substring(Start, url.Length - Start);
                           //*******************Looking for orginal service activity
                            QueryExpression serviceActivityQuery = new QueryExpression { EntityName = "new_supportrecord" };
                            serviceActivityQuery.Criteria.AddCondition("new_supportrecordid", ConditionOperator.Equal, strSource);
                            serviceActivityQuery.ColumnSet = new ColumnSet("new_supportrecordid", "new_checkin", "new_checkout");
                            EntityCollection returnServiceActivity = service.RetrieveMultiple(serviceActivityQuery);
                            returnServiceActivity.Entities[0].Attributes["new_checkin"] = (DateTime)entityImage.Attributes["cdi_identifiedon"];
                            returnServiceActivity.Entities[0].Attributes["new_checkout"] = (DateTime)entityImage.Attributes["anniversary"];
                            service.Update(returnServiceActivity.Entities[0]);
                                    }
                        }
                    }
                    catch (FaultException ex)
                    {
                        throw new InvalidPluginExecutionException("Error", ex);
                    }
                }
            }


        }
    }
}
